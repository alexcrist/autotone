{"version":3,"file":"BufferProcessor.bundle.js","mappings":";;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack:///./src/audio/recorder/BufferProcessor.js"],"sourcesContent":["class BufferProcessor extends AudioWorkletProcessor {\n\n  _buffer;\n  _bufferIndex;\n  _bufferSize;\n\n  constructor(options) {\n    super();\n    this.port.onmessage = this.handleMessage.bind(this);\n    this._bufferSize = options.parameterData.bufferSize;\n    this._buffer = new Float32Array(this._bufferSize);\n    this.reset();\n  }\n\n  handleMessage(event) {\n    const { type } = event.data;\n    if (type === 'reset') {\n      this.reset();\n    }\n  }\n\n  reset() {\n    this._bufferIndex = 0;\n  }\n\n  process(inputs) {\n    const firstInput = inputs[0];\n    const firstChannel = firstInput[0];\n    if (firstChannel) {\n      for (let i = 0; i < firstChannel.length; i++) {\n        this._buffer[this._bufferIndex] = firstChannel[i];\n        this._bufferIndex++;\n        if (this._bufferIndex === this._bufferSize) {\n          this.flushBuffer();\n        }\n      }\n    }\n    return true;\n  }\n\n  flushBuffer() {\n    this._bufferIndex = 0;\n    this.port.postMessage(new Float32Array(this._buffer));\n  }\n}\n\nregisterProcessor('buffer-processor', BufferProcessor);\n"],"names":[],"sourceRoot":""}